#import <XCTest/XCTest.h>
#import <Mantle/MTLJSONAdapter.h>
#import "EncodingUtils.h"
#import "RecordSyncTag.h"

@interface EncodingUtilsTests : XCTestCase

@end

@implementation EncodingUtilsTests

- (void)setUp {
    [super setUp];
}

- (void)tearDown {
    [super tearDown];
}

- (void)testCrc16 {
    NSData *testData = [EncodingUtils dataFromHexString:@"01 06 00 2e b8 01"];
    uint16_t crc = [EncodingUtils crc16:testData withOffset:0 andLength:(uint16_t) (testData.length - 2)];
    XCTAssertEqual(crc, [EncodingUtils getPacketCrc16:testData], @"Wrong crc value");
}

- (void)testPingCrc16 {
    NSData *testData = [EncodingUtils dataFromHexString:@"01 06 00 0A 5E 65"];
    uint16_t crc = [EncodingUtils crc16:testData withOffset:0 andLength:(uint16_t) (testData.length - 2)];
    XCTAssertEqual(crc, [EncodingUtils getPacketCrc16:testData], @"Wrong crc value");
}

- (void)testExceptionOnInvalidCrc {
    NSString *inputWithBadCrc = @"01 26 04 01 6D 0B 00 00 19 00 00 00 0B 01 75 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CB 20 DB B8 D4 08 91 56 D4 08 02 00 54 56 D4 08 5E 01 00 00 E9 9D 0D BA D4 08 C3 57 D4 08 01 00 BC 57 D4 08 0A 00 00 00 E8 E3 FA 06 D5 08 B0 A4 D4 08 02 00 9C A4 D4 08 5E 01 00 00 40 E5 AF 13 D5 08 65 B1 D4 08 01 00 44 B1 D4 08 0D 00 00 00 AE C5 67 3B D5 08 1D D9 D4 08 01 00 E0 D8 D4 08 04 00 00 00 78 96 BD 50 D5 08 73 EE D4 08 02 00 70 EE D4 08 F4 01 00 00 9C 0D 2D BE D5 08 E3 5B D5 08 02 00 A8 5B D5 08 58 02 00 00 38 0F 37 BE D5 08 ED 5B D5 08 02 00 E4 5B D5 08 2C 01 00 00 54 2A 41 CA D5 08 F7 67 D5 08 01 00 CC 64 D5 08 01 00 00 00 14 1F D9 DD D5 08 8F 7B D5 08 02 00 88 7B D5 08 FA 00 00 00 29 60 5C 05 D6 08 12 A3 D5 08 02 00 E8 A2 D5 08 2C 01 00 00 F8 2F D9 05 D6 08 8F A3 D5 08 01 00 60 A3 D5 08 02 00 00 00 86 7C 52 08 D6 08 08 A6 D5 08 01 00 F4 A5 D5 08 0A 00 00 00 F6 32 CB 22 D6 08 81 C0 D5 08 01 00 70 C0 D5 08 02 00 00 00 AB 3E AA 2C D6 08 60 CA D5 08 01 00 48 CA D5 08 02 00 00 00 3D 95 EA 2E D6 08 A0 CC D5 08 01 00 64 CC D5 08 02 00 00 00 36 77 BE 35 D6 08 74 D3 D5 08 01 00 6C D3 D5 08 02 00 00 00 FB 15 1B 53 D6 08 D1 F0 D5 08 02 00 B8 F0 D5 08 2C 01 00 00 48 13 90 59 D6 08 46 F7 D5 08 01 00 0C F7 D5 08 0A 00 00 00 45 B3 E1 6C D6 08 97 0A D6 08 01 00 80 0A D6 08 04 00 00 00 4C D0 A1 93 D6 08 57 31 D6 08 02 00 2C 31 D6 08 64 00 00 00 61 9A DE 93 D6 08 94 31 D6 08 02 00 68 31 D6 08 F4 01 00 00 14 9E DE 9C D6 08 94 3A D6 08 02 00 8C 3A D6 08 64 00 00 00 81 6A BB 12 D7 08 71 B0 D6 08 02 00 70 B0 D6 08 2C 01 00 00 33 52 10 13 D7 08 C6 B0 D6 08 02 00 AC B0 D6 08 58 02 00 00 CA 2B 86 0B 00 00 0A 00 00 00 0B 01 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C9 5D E3 1B D7 08 99 B9 D6 08 01 00 94 B9 D6 08 01 00 00 00 3D A5 3A 2A D7 08 F0 C7 D6 08 01 00 E0 C7 D6 08 02 00 00 00 EE 29 2C 2B D7 08 E2 C8 D6 08 01 00 D0 C8 D6 08 02 00 00 00 45 F6 A6 5F D7 08 5C FD D6 08 02 00 50 FD D6 08 5E 01 00 00 FC FF AC 62 D7 08 62 00 D7 08 01 00 5C 00 D7 08 0A 00 00 00 60 87 1C 8E D7 08 D2 2B D7 08 01 00 B8 2B D7 08 02 00 00 00 56 2D 0F 8F D7 08 C5 2C D7 08 01 00 A8 2C D7 08 01 00 00 00 EC 0C 6A B8 D7 08 20 56 D7 08 02 00 E8 55 D7 08 5E 01 00 00 9A AB A6 BB D7 08 5C 59 D7 08 01 00 30 59 D7 08 0D 00 00 00 A3 32 35 C2 D7 08 EB 5F D7 08 02 00 C0 5F D7 08 96 00 00 00 08 9C FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 24 5E";
    NSData *data = [EncodingUtils dataFromHexString:inputWithBadCrc];
    bool exceptionReceived = false;
    @try {
        [EncodingUtils validateCrc:data];
    } @catch (NSException *e) {
        // Everything is good
        NSLog(@"Valid exception received: [%s]", [e.description UTF8String]);
        exceptionReceived = true;
    }
    
    XCTAssertTrue(exceptionReceived, @"Should have got an exception for bad CRC");
}

- (void)testValidCrcReturnsTrue {
    NSString *inputWithBadCrc = @"01 26 04 01 6D 0B 00 00 19 00 00 00 0B 01 75 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CB 20 DB B8 D4 08 91 56 D4 08 02 00 54 56 D4 08 5E 01 00 00 E9 9D 0D BA D4 08 C3 57 D4 08 01 00 BC 57 D4 08 0A 00 00 00 E8 E3 FA 06 D5 08 B0 A4 D4 08 02 00 9C A4 D4 08 5E 01 00 00 40 E5 AF 13 D5 08 65 B1 D4 08 01 00 44 B1 D4 08 0D 00 00 00 AE C5 67 3B D5 08 1D D9 D4 08 01 00 E0 D8 D4 08 04 00 00 00 78 96 BD 50 D5 08 73 EE D4 08 02 00 70 EE D4 08 F4 01 00 00 9C 0D 2D BE D5 08 E3 5B D5 08 02 00 A8 5B D5 08 58 02 00 00 38 0F 37 BE D5 08 ED 5B D5 08 02 00 E4 5B D5 08 2C 01 00 00 54 2A 41 CA D5 08 F7 67 D5 08 01 00 CC 64 D5 08 01 00 00 00 14 1F D9 DD D5 08 8F 7B D5 08 02 00 88 7B D5 08 FA 00 00 00 29 60 5C 05 D6 08 12 A3 D5 08 02 00 E8 A2 D5 08 2C 01 00 00 F8 2F D9 05 D6 08 8F A3 D5 08 01 00 60 A3 D5 08 02 00 00 00 86 7C 52 08 D6 08 08 A6 D5 08 01 00 F4 A5 D5 08 0A 00 00 00 F6 32 CB 22 D6 08 81 C0 D5 08 01 00 70 C0 D5 08 02 00 00 00 AB 3E AA 2C D6 08 60 CA D5 08 01 00 48 CA D5 08 02 00 00 00 3D 95 EA 2E D6 08 A0 CC D5 08 01 00 64 CC D5 08 02 00 00 00 36 77 BE 35 D6 08 74 D3 D5 08 01 00 6C D3 D5 08 02 00 00 00 FB 15 1B 53 D6 08 D1 F0 D5 08 02 00 B8 F0 D5 08 2C 01 00 00 48 13 90 59 D6 08 46 F7 D5 08 01 00 0C F7 D5 08 0A 00 00 00 45 B3 E1 6C D6 08 97 0A D6 08 01 00 80 0A D6 08 04 00 00 00 4C D0 A1 93 D6 08 57 31 D6 08 02 00 2C 31 D6 08 64 00 00 00 61 9A DE 93 D6 08 94 31 D6 08 02 00 68 31 D6 08 F4 01 00 00 14 9E DE 9C D6 08 94 3A D6 08 02 00 8C 3A D6 08 64 00 00 00 81 6A BB 12 D7 08 71 B0 D6 08 02 00 70 B0 D6 08 2C 01 00 00 33 52 10 13 D7 08 C6 B0 D6 08 02 00 AC B0 D6 08 58 02 00 00 CA 2B 86 0B 00 00 0A 00 00 00 0B 01 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C9 5D E3 1B D7 08 99 B9 D6 08 01 00 94 B9 D6 08 01 00 00 00 3D A5 3A 2A D7 08 F0 C7 D6 08 01 00 E0 C7 D6 08 02 00 00 00 EE 29 2C 2B D7 08 E2 C8 D6 08 01 00 D0 C8 D6 08 02 00 00 00 45 F6 A6 5F D7 08 5C FD D6 08 02 00 50 FD D6 08 5E 01 00 00 FC FF AC 62 D7 08 62 00 D7 08 01 00 5C 00 D7 08 0A 00 00 00 60 87 1C 8E D7 08 D2 2B D7 08 01 00 B8 2B D7 08 02 00 00 00 56 2D 0F 8F D7 08 C5 2C D7 08 01 00 A8 2C D7 08 01 00 00 00 EC 0C 6A B8 D7 08 20 56 D7 08 02 00 E8 55 D7 08 5E 01 00 00 9A AB A6 BB D7 08 5C 59 D7 08 01 00 30 59 D7 08 0D 00 00 00 A3 32 35 C2 D7 08 EB 5F D7 08 02 00 C0 5F D7 08 96 00 00 00 08 9C FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 24 5F";
    NSData *data = [EncodingUtils dataFromHexString:inputWithBadCrc];
    
    bool isValid = [EncodingUtils validateCrc:data];
    
    XCTAssertTrue(isValid);
}

- (void)testTimeZoneFromNonAlignedTimeDifference {
    NSCalendarDate *internalDate = [NSCalendarDate dateWithYear:2011 month:1 day:1 hour:7 minute:30 second:0 timeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    NSCalendarDate *localDate = [NSCalendarDate dateWithYear:2011 month:1 day:1 hour:0 minute:28 second:15 timeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    
    NSTimeZone *actualTimeZone = [Types timezoneFromLocalTime:localDate andInternalTime:internalDate];
    
    NSTimeZone *expectedTimezone = [NSTimeZone timeZoneForSecondsFromGMT:-7 * 60 * 60];
    XCTAssertEqualObjects(expectedTimezone, actualTimeZone, @"Expected GMT -07:00 offset.");
}

- (void)testSerializationOfRecordSyncTagSymmetric {
    RecordSyncTag *tag = [RecordSyncTag tagWithRecordNumber:@10 pageNumber:@12];
    NSDictionary *JSONDictionary = [MTLJSONAdapter JSONDictionaryFromModel:tag];
    NSError *error;
    NSString *serializedTag = [EncodingUtils dictionaryToJSON:JSONDictionary error:&error];
    XCTAssertNil(error);
    NSLog(@"Serialized tag [%s]", [serializedTag UTF8String]);
    
    NSDictionary *deserializedJSON = [EncodingUtils stringToJsonDictionary:serializedTag error:&error];
    RecordSyncTag *deserializedTag = [MTLJSONAdapter modelOfClass:RecordSyncTag.class fromJSONDictionary:deserializedJSON error:&error];
    XCTAssertEqualObjects(deserializedTag, tag);
}
@end
